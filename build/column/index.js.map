{"version":3,"file":"column/index.js","mappings":"mBAAA,MAAM,EAA+BA,OAAW,GAAW,QCArD,EAA+BA,OAAW,GAAQ,KCAlD,EAA+BA,OAAW,GAAS,MCAnD,EAA+BA,OAAW,GAAW,QCArD,GCA+BA,OAAW,GAAU,ODArBA,OAAW,GAAe,aEAzD,EAA+BA,OAAW,GAAc,WCAxD,EAA+BA,OAAW,GAAQ,KCAxDC,QAAQC,IAAI,uCAsDZC,EAAAA,EAAAA,WACC,mBACA,iCACAC,EAAAA,EAAAA,6BACEC,GACA,SAAsCC,GACrC,MAAM,KAAEC,EAAF,WAAQC,EAAR,cAAoBC,EAApB,SAAmCC,GAAaJ,EACtD,GAAI,gBAAkBC,EACrB,OAAO,mBAACF,EAAcC,GAGvB,MAAM,MAAEK,EAAF,UAASC,GAAcJ,GAEvB,MACLK,EADK,eAELC,EAFK,iBAGLC,EAHK,aAILC,IACGC,EAAAA,EAAAA,YACHC,IACC,MAAM,UACLC,EADK,cAELC,EAFK,cAGLC,EAHK,qBAILC,EAJK,mBAKLC,GACGL,EAAO,qBAELM,EAAoBF,EAAqBZ,GAEzCe,EAAiBF,EAAmBC,GAEpCE,EAAW,CAChBb,MAAOO,EAAcV,EAAUc,GAC/BV,eAAgB,EAAIO,EAAcX,GAAUiB,OAC5CZ,iBAAkBI,EAAUK,GAC5BR,aAAcQ,EACdC,kBAGD,OADAxB,QAAQC,IAAI,wBAAyBwB,GAC9BA,CAAP,GAED,CAAChB,IAgBF,OAbAkB,EAAAA,EAAAA,YAAU,KACLb,EAAiBY,OAAS,GAC7B1B,QAAQC,IAAI,wBAnDlB,SAAiC2B,EAAcnB,GAC9C,OAAO,IA3BR,SAAsBmB,EAAcnB,GACnC,IAAIoB,EAAkB,GACtB,MAAMC,EAAaF,EAAaG,WAAUC,GAAUA,EAAOvB,WAAaA,IACxET,QAAQC,IAAI,8BAA+B6B,GAC3C,MAAM,MAAEpB,GAAUkB,EAAaE,GAAYvB,WAiB3C,OAfAqB,EAAaK,SAAQD,IAEpB,GAAIA,EAAOzB,WAAWG,MAAO,CAC5B,IAAIwB,EAAcF,EAAOzB,WAAWG,MAKpCwB,EAAcA,EAAYC,QAAQ,cAAe,IACjDN,EAAgBO,KAAKF,EACrB,KAGFlC,QAAQC,IAAI,mCAAoC4B,GAEzCA,EAAgBQ,QAAO,CAACC,EAAKC,IAC5BD,EAAME,SAASD,IACnB,EACJ,CAGaE,CAAab,EAAcnB,EACxC,CAiD0CiC,CAAwB5B,EAAkBL,GAC/E,GACC,CAACK,KAEJa,EAAAA,EAAAA,YAAU,KACJhB,GAEJH,EAAc,CAACE,MAAO,IACtB,GACC,CAACC,KAGH,mBAAC,EAAAgC,SAAD,MACC,mBAACvC,EAAcC,IACf,mBAAC,EAAAuC,kBAAD,MACC,mBAAC,EAAAC,UAAD,CAAWC,MAAM,+BAChB,gOACA,8OACA,mBAAC,EAAAC,cAAD,CACCC,OAAOC,EAAAA,EAAAA,IAAG,6BACVC,QAASvC,EACTwC,SAAU,KACT3C,EAAc,CAAEG,WAAYA,GAA5B,EAEDyC,MAAMH,EAAAA,EAAAA,IAAG,sEAIZ,mBAAC,EAAAI,0BAAD,MACC,yDACA,mBAAC,EAAAC,YAAD,OAIH,GACF,mCAED,G","sources":["webpack://@pewresearch/core-block-library/external window [\"wp\",\"element\"]","webpack://@pewresearch/core-block-library/external window [\"wp\",\"i18n\"]","webpack://@pewresearch/core-block-library/external window [\"wp\",\"hooks\"]","webpack://@pewresearch/core-block-library/external window [\"wp\",\"compose\"]","webpack://@pewresearch/core-block-library/external window [\"wp\",\"blockEditor\"]","webpack://@pewresearch/core-block-library/external window [\"wp\",\"blocks\"]","webpack://@pewresearch/core-block-library/external window [\"wp\",\"components\"]","webpack://@pewresearch/core-block-library/external window [\"wp\",\"data\"]","webpack://@pewresearch/core-block-library/./src/column/index.js"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"hooks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"compose\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","console.log(\"Hello World -> src/column/index.js\");\n\n/**\n * WordPress Dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { addFilter } from '@wordpress/hooks';\nimport { createHigherOrderComponent } from '@wordpress/compose';\nimport {\n\tcreateBlock,\n\tregisterBlockStyle,\n\tregisterBlockVariation,\n\trawHandler,\n} from '@wordpress/blocks';\nimport { Fragment, useEffect } from '@wordpress/element';\nimport { InspectorControls, InspectorAdvancedControls } from '@wordpress/block-editor';\nimport {\n\tTextControl,\n\tToggleControl,\n\tCardDivider,\n\tPanelBody,\n} from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\n\nfunction getAllWidths(otherColumns, clientId) {\n\tlet allColumnWidths = [];\n\tconst thisColumn = otherColumns.findIndex(column => column.clientId === clientId);\n\tconsole.log('getAllWidths() thisColumn: ', thisColumn);\n\tconst { width } = otherColumns[thisColumn].attributes;\n\n\totherColumns.forEach(column => {\n\t\t// if column attributes does not have a width property then continue.\n\t\tif (column.attributes.width) {\n\t\t\tlet columnWidth = column.attributes.width;\n\t\t\t// if (clientId === column.clientId) {\n\t\t\t// \tcolumnWidth = width;\n\t\t\t// }\n\t\t\t// Remove %, px, vw, vh from columnWidth\n\t\t\tcolumnWidth = columnWidth.replace(/%|px|vw|vh/g, '');\n\t\t\tallColumnWidths.push(columnWidth);\n\t\t}\n\t});\n\n\tconsole.log('getAllWidths() allColumnWidths: ', allColumnWidths);\n\n\treturn allColumnWidths.reduce((acc, curr) => {\n\t\treturn acc + parseInt(curr);\n\t} , 0);\n}\n\nfunction calculateAvailableWidth(otherColumns, clientId) {\n\treturn 100 - getAllWidths(otherColumns, clientId);\n};\n\naddFilter(\n\t'editor.BlockEdit',\n\t'prc-core-block-library/column',\n\tcreateHigherOrderComponent(\n\t\t(BlockEdit) =>\n\t\t\tfunction ColumnBlockAdvancedControls (props) {\n\t\t\t\tconst { name, attributes, setAttributes, clientId } = props;\n\t\t\t\tif ('core/column' !== name) {\n\t\t\t\t\treturn <BlockEdit {...props} />;\n\t\t\t\t}\n\n\t\t\t\tconst { width, fillWidth } = attributes;\n\n\t\t\t\tconst {\n\t\t\t\t\tindex,\n\t\t\t\t\thasChildBlocks,\n\t\t\t\t\totheColumnBlocks,\n\t\t\t\t\trootClientId,\n\t\t\t\t} = useSelect(\n\t\t\t\t\tselect => {\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tgetBlocks,\n\t\t\t\t\t\t\tgetBlockIndex,\n\t\t\t\t\t\t\tgetBlockOrder,\n\t\t\t\t\t\t\tgetBlockRootClientId,\n\t\t\t\t\t\t\tgetBlockAttributes,\n\t\t\t\t\t\t} = select('core/block-editor');\n\n\t\t\t\t\t\tconst rootBlockClientId = getBlockRootClientId(clientId);\n\t\t\t\t\t\t// Get attributes from 'core/columns' parent block.\n\t\t\t\t\t\tconst rootAttributes = getBlockAttributes(rootBlockClientId);\n\n\t\t\t\t\t\tconst toReturn = {\n\t\t\t\t\t\t\tindex: getBlockIndex(clientId, rootBlockClientId),\n\t\t\t\t\t\t\thasChildBlocks: 0 < getBlockOrder(clientId).length,\n\t\t\t\t\t\t\totheColumnBlocks: getBlocks(rootBlockClientId),\n\t\t\t\t\t\t\trootClientId: rootBlockClientId,\n\t\t\t\t\t\t\trootAttributes,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconsole.log(\"core/column->advanced\", toReturn);\n\t\t\t\t\t\treturn toReturn;\n\t\t\t\t\t},\n\t\t\t\t\t[clientId],\n\t\t\t\t);\n\n\t\t\t\tuseEffect(()=>{\n\t\t\t\t\tif (otheColumnBlocks.length > 0) {\n\t\t\t\t\t\tconsole.log(\"max width available: \", calculateAvailableWidth(otheColumnBlocks, clientId));\n\t\t\t\t\t}\n\t\t\t\t}, [otheColumnBlocks]);\n\n\t\t\t\tuseEffect(()=>{\n\t\t\t\t\tif ( fillWidth ) {\n\t\t\t\t\t\t// Null out width to use the remaining width available.\n\t\t\t\t\t\tsetAttributes({width: ''});\n\t\t\t\t\t}\n\t\t\t\t}, [fillWidth]);\n\n\t\t\t\treturn (\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<BlockEdit {...props} />\n\t\t\t\t\t\t<InspectorControls>\n\t\t\t\t\t\t\t<PanelBody title=\"Column settings (advanced)\">\n\t\t\t\t\t\t\t\t<p>Get all the widths in the parent columns block and then have a toggle for \"fill width with remaining\" which would calculate all the widths and whats remaining depending on unit of measurement</p>\n\t\t\t\t\t\t\t\t<p>HOWEVER because we want to maintain backwards compat we should also change the width to meet the percentage remaining. This way if you deactivate this block library it will still ~mostly~ work as intended.</p>\n\t\t\t\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\t\t\t\tlabel={__('Fill width with remaining')}\n\t\t\t\t\t\t\t\t\tchecked={fillWidth}\n\t\t\t\t\t\t\t\t\tonChange={() => {\n\t\t\t\t\t\t\t\t\t\tsetAttributes({ fillWidth: !fillWidth });\n\t\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\t\thelp={__('Zeroes out the width, flexbox then fills the remaining width.')}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</PanelBody>\n\t\t\t\t\t\t</InspectorControls>\n\t\t\t\t\t\t<InspectorAdvancedControls>\n\t\t\t\t\t\t\t<p>Column Advanced Controls</p>\n\t\t\t\t\t\t\t<CardDivider />\n\t\t\t\t\t\t</InspectorAdvancedControls>\n\t\t\t\t\t</Fragment>\n\t\t\t\t);\n\t\t\t},\n\t\t'withColumnBlockAdvancedControls',\n\t),\n\t21,\n);\n"],"names":["window","console","log","addFilter","createHigherOrderComponent","BlockEdit","props","name","attributes","setAttributes","clientId","width","fillWidth","index","hasChildBlocks","otheColumnBlocks","rootClientId","useSelect","select","getBlocks","getBlockIndex","getBlockOrder","getBlockRootClientId","getBlockAttributes","rootBlockClientId","rootAttributes","toReturn","length","useEffect","otherColumns","allColumnWidths","thisColumn","findIndex","column","forEach","columnWidth","replace","push","reduce","acc","curr","parseInt","getAllWidths","calculateAvailableWidth","Fragment","InspectorControls","PanelBody","title","ToggleControl","label","__","checked","onChange","help","InspectorAdvancedControls","CardDivider"],"sourceRoot":""}